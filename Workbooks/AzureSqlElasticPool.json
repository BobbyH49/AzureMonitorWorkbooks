{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# Azure SQL Database Elastic Pool Performance Monitor"
      },
      "name": "text - Header"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscription}"
        ],
        "parameters": [
          {
            "id": "51aa3a9b-14e0-4c22-a60d-abdbf8813f00",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": true,
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all"
          },
          {
            "id": "6cb303fd-4812-4097-a468-a177d8782913",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceGroup",
            "label": "Resource Group",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resourceContainers \r\n| where type == \"microsoft.resources/subscriptions/resourcegroups\"\r\n| join kind = inner (\r\n    resources\r\n    | where type == \"microsoft.sql/servers/elasticpools\"\r\n    | distinct resourceGroup, subscriptionId\r\n) on resourceGroup, subscriptionId\r\n| project resourceGroup\r\n| order by resourceGroup asc",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "608c66cd-f3a8-45fe-98c0-69fb8a0b6d05",
            "version": "KqlParameterItem/1.0",
            "name": "SqlElasticPool",
            "label": "SQL Elastic Pool",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| where tolower(type) == \"microsoft.sql/servers/elasticpools\"\r\n| where resourceGroup in ({ResourceGroup})\r\n| project AffectedResource=id, resourceGroup",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "2d6f33ef-d1ec-480e-a6d8-3d198f572eaf",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            }
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "parameters - Sql Elastic Pool"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook4d373e23-a23c-4f5a-99ea-e02c3d361741",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.sql/servers/elasticpools",
        "metricScope": 0,
        "resourceParameter": "SqlElasticPool",
        "resourceIds": [
          "{SqlElasticPool}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.sql/servers/elasticpools",
            "metric": "microsoft.sql/servers/elasticpools-Basic-cpu_percent",
            "aggregation": 4,
            "splitBy": null,
            "columnName": "CpuPct"
          }
        ],
        "title": "CPU % Utilization",
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibility": {
        "parameterName": "SqlElasticPool",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "metrics - SqlCpuPct"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook4d373e23-a23c-4f5a-99ea-e02c3d361741",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.sql/servers/elasticpools",
        "metricScope": 0,
        "resourceParameter": "SqlElasticPool",
        "resourceIds": [
          "{SqlElasticPool}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.sql/servers/elasticpools",
            "metric": "microsoft.sql/servers/elasticpools-InstanceAndAppAdvanced-sqlserver_process_memory_percent",
            "aggregation": 4,
            "splitBy": null,
            "columnName": "MemoryPct"
          }
        ],
        "title": "Available Memory",
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibility": {
        "parameterName": "SqlElasticPool",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "metrics - SqlMemoryPct"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook4d373e23-a23c-4f5a-99ea-e02c3d361741",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.sql/servers/elasticpools",
        "metricScope": 0,
        "resourceParameter": "SqlElasticPool",
        "resourceIds": [
          "{SqlElasticPool}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.sql/servers/elasticpools",
            "metric": "microsoft.sql/servers/elasticpools-Basic-physical_data_read_percent",
            "aggregation": 4,
            "splitBy": null,
            "columnName": "DataIOPct"
          }
        ],
        "title": "Data IO %",
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibility": {
        "parameterName": "SqlElasticPool",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "metrics - SqlDataIOPct"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook4d373e23-a23c-4f5a-99ea-e02c3d361741",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.sql/servers/elasticpools",
        "metricScope": 0,
        "resourceParameter": "SqlElasticPool",
        "resourceIds": [
          "{SqlElasticPool}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.sql/servers/elasticpools",
            "metric": "microsoft.sql/servers/elasticpools-Basic-log_write_percent",
            "aggregation": 4,
            "splitBy": null,
            "columnName": "LogIOPct"
          }
        ],
        "title": "Log IO %",
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibility": {
        "parameterName": "SqlElasticPool",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "metrics - SqlLogIOPct"
    },
    {
      "type": 1,
      "content": {
        "json": "### Click an elastic pool to view the list of databases in the pool"
      },
      "conditionalVisibility": {
        "parameterName": "SqlElasticPool",
        "comparison": "isNotEqualTo"
      },
      "name": "text - Elastic Pools"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where tolower(type) == 'microsoft.sql/servers/elasticpools'\r\n| where resourceGroup in ({ResourceGroup})\r\n| where id in ({SqlElasticPool})\r\n| project ResourceId = id, Region = location, tier = tostring(sku.tier), family = tostring(sku.family), dtus = case(kind contains \"vcore\", 0, sku.capacity), vcores = case(kind contains \"vcore\", sku.capacity, 0), minCapacity = toint(properties.perDatabaseSettings.minCapacity), maxCapacity = toint(toint(properties.perDatabaseSettings.maxCapacity)), zoneRedundant = tostring(properties.zoneRedundant), maxSizeGB = properties.maxSizeBytes / 1024 / 1024 / 1024, subscriptionId = strcat('/subscriptions/', subscriptionId)",
        "size": 1,
        "title": "Elastic Pool Info",
        "exportFieldName": "ResourceId",
        "exportParameterName": "ResourceId",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{Subscription}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "SqlElasticPool",
        "comparison": "isNotEqualTo"
      },
      "name": "query - elastic pool details"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where tolower(type) == 'microsoft.sql/servers/databases'\r\n| extend elasticPoolId = tolower(tostring(properties.elasticPoolId))\r\n| join kind = inner (\r\n    resources\r\n    | where tolower(type) == 'microsoft.sql/servers/elasticpools'\r\n    | where resourceGroup in ({ResourceGroup})\r\n    | where id == \"{ResourceId}\"\r\n    | project elasticPoolId = tolower(tostring(id))\r\n) on elasticPoolId\r\n| where name != 'master'\r\n| project ElasticPoolId = elasticPoolId, ResourceId = id, Region = location, backupStorageType = tostring(properties.storageAccountType), zoneRedundant = tostring(properties.zoneRedundant), collation = tostring(properties.catalogCollation), earliestRestoreDate = tostring(properties.earliestRestoreDate), maxSizeGB = properties.maxSizeBytes / 1024 / 1024 / 1024, readScale = tostring(properties.readScale), subscriptionId = strcat('/subscriptions/', subscriptionId)",
        "size": 1,
        "title": "Database Info",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{Subscription}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "earliestRestoreDate",
              "formatter": 6
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "ResourceId",
        "comparison": "isNotEqualTo"
      },
      "name": "query - database details"
    },
    {
      "type": 1,
      "content": {
        "json": "### To review Query Store metrics you will need to point to the Log Analytics Workspace that is capturing the Query Store diagnostic settings"
      },
      "conditionalVisibility": {
        "parameterName": "ResourceId",
        "comparison": "isNotEqualTo"
      },
      "name": "text - Log Analytics"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{SubscriptionLA}"
        ],
        "parameters": [
          {
            "id": "51aa3a9b-14e0-4c22-a60d-abdbf8813f00",
            "version": "KqlParameterItem/1.0",
            "name": "SubscriptionLA",
            "label": "Subscription",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": true,
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all"
          },
          {
            "id": "6cb303fd-4812-4097-a468-a177d8782913",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceGroupLA",
            "label": "Resource Group",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resourceContainers \r\n| where type == \"microsoft.resources/subscriptions/resourcegroups\"\r\n| join kind = inner (\r\n    resources\r\n    | where type == \"microsoft.operationalinsights/workspaces\"\r\n    | distinct resourceGroup, subscriptionId\r\n) on resourceGroup, subscriptionId\r\n| project resourceGroup\r\n| order by resourceGroup asc",
            "crossComponentResources": [
              "{SubscriptionLA}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "608c66cd-f3a8-45fe-98c0-69fb8a0b6d05",
            "version": "KqlParameterItem/1.0",
            "name": "LogAnalytics",
            "label": "Log Analytics Workspace",
            "type": 5,
            "query": "resources\r\n| where tolower(type) == \"microsoft.operationalinsights/workspaces\"\r\n| where resourceGroup in ({ResourceGroupLA})\r\n| project AffectedResource=id, resourceGroup",
            "crossComponentResources": [
              "{SubscriptionLA}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": "/subscriptions/9204f233-abf1-4491-ad9a-fffb219edbfa/resourceGroups/ADFLabDevRG/providers/Microsoft.OperationalInsights/workspaces/devrh1976loganalytics"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "ElasticPoolDatabase",
            "type": 5,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| where tolower(type) == 'microsoft.sql/servers/databases'\r\n| extend elasticPoolId = tolower(tostring(properties.elasticPoolId))\r\n| join kind = inner (\r\n    resources\r\n    | where tolower(type) == 'microsoft.sql/servers/elasticpools'\r\n    | where resourceGroup in ({ResourceGroup})\r\n    | where id == \"{ResourceId}\"\r\n    | project elasticPoolId = tolower(tostring(id))\r\n) on elasticPoolId\r\n| where name != 'master'\r\n| project SqlDatabase = id",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "id": "0b84896a-d267-4567-a0d6-49ebd8a4077f"
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "conditionalVisibility": {
        "parameterName": "ResourceId",
        "comparison": "isNotEqualTo"
      },
      "name": "parameters - Log Analytics"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = strcat(extract(\".+/SERVERS/([^/]+)/.+\", 1, ResourceId), \"/\", extract(\".+/DATABASES/(.+)\", 1, ResourceId)).tolower()\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize DurationMinutes = round(sum(duration_d) / 60000000, 3) by Resource, end_time\r\n| render timechart",
        "size": 0,
        "title": "Duration Minutes",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "query - Sql Duration"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = strcat(extract(\".+/SERVERS/([^/]+)/.+\", 1, ResourceId), \"/\", extract(\".+/DATABASES/(.+)\", 1, ResourceId)).tolower()\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize CpuMinutes = round(sum(cpu_time_d) / 60000000, 3) by Resource, end_time\r\n| render timechart",
        "size": 0,
        "title": "CPU Minutes",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "query - Sql Cpu"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = strcat(extract(\".+/SERVERS/([^/]+)/.+\", 1, ResourceId), \"/\", extract(\".+/DATABASES/(.+)\", 1, ResourceId)).tolower()\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize LogicalReadsMB = round(sum(logical_io_reads_d) / 128, 3) by Resource, end_time\r\n| render timechart",
        "size": 0,
        "title": "Logical Reads MB",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "query - Sql Logical Reads"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = strcat(extract(\".+/SERVERS/([^/]+)/.+\", 1, ResourceId), \"/\", extract(\".+/DATABASES/(.+)\", 1, ResourceId)).tolower()\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize PhysicalReadsMB = round(sum(physical_io_reads_d) / 128, 3) by Resource, end_time\r\n| render timechart",
        "size": 0,
        "title": "Physical Reads MB",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "query - Sql Physical Reads"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = strcat(extract(\".+/SERVERS/([^/]+)/.+\", 1, ResourceId), \"/\", extract(\".+/DATABASES/(.+)\", 1, ResourceId)).tolower()\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize LogicalWritesMB = round(sum(logical_io_writes_d) / 128, 3) by Resource, end_time\r\n| render timechart",
        "size": 0,
        "title": "Logical Writes MB",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "query - Sql Logical Writes"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = strcat(extract(\".+/SERVERS/([^/]+)/.+\", 1, ResourceId), \"/\", extract(\".+/DATABASES/(.+)\", 1, ResourceId)).tolower()\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize QueryMaxUsedMemoryMB = round(avg(query_max_used_memory_d / count_executions_d) / 128, 3) by Resource, end_time\r\n| render timechart",
        "size": 0,
        "title": "Query Max Used Memory MB",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "query - Sql Query Max Used Memory MB"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = strcat(extract(\".+/SERVERS/([^/]+)/.+\", 1, ResourceId), \"/\", extract(\".+/DATABASES/(.+)\", 1, ResourceId)).tolower()\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize LogMBUsed = round(sum(log_bytes_used_d) / 1024 / 1024, 3) by Resource, end_time\r\n| render timechart",
        "size": 0,
        "title": "Log MB Used",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "query - Sql Log MB Used"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreWaitStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = strcat(extract(\".+/SERVERS/([^/]+)/.+\", 1, ResourceId), \"/\", extract(\".+/DATABASES/(.+)\", 1, ResourceId)).tolower()\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize WaitTimeMinutes = round(sum(total_query_wait_time_ms_d) / 60000, 3) by Resource, end_time\r\n| render timechart",
        "size": 0,
        "title": "Wait Time Minutes",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "query - Sql Wait TIme Minutes"
    },
    {
      "type": 1,
      "content": {
        "json": "### Click a database to view the worst performing queries"
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "name": "text - Query Store Totals"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId in~({ElasticPoolDatabase})\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = _ResourceId\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize DurationMinutes = round(sum(duration_d) / 60000000, 3), CpuMinutes = round(sum(cpu_time_d) / 60000000, 3), LogicalReadsMB = round(sum(logical_io_reads_d) / 128, 3), PhysicalReadsMB = round(sum(physical_io_reads_d) / 128, 3), LogicalWritesMB = round(sum(logical_io_writes_d) / 128, 3), QueryMaxUsedMemoryMB = round(avg(query_max_used_memory_d / count_executions_d) / 128, 3), LogMBUsed = round(sum(log_bytes_used_d) / 1024 / 1024, 3) by Resource\r\n| join kind = inner (\r\n    AzureDiagnostics\r\n    | where Category  == \"QueryStoreWaitStatistics\"\r\n    | where _ResourceId in~({ElasticPoolDatabase})\r\n    | extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n    | extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n    | extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n    | extend Resource = _ResourceId\r\n    | where start_time {TimeRange}\r\n    | where end_time {TimeRange}\r\n    | summarize WaitTimeMinutes = round(sum(total_query_wait_time_ms_d) / 60000, 3) by Resource\r\n) on Resource\r\n| project Resource, DurationMinutes, CpuMinutes, LogicalReadsMB, PhysicalReadsMB, LogicalWritesMB, QueryMaxUsedMemoryMB, LogMBUsed, WaitTimeMinutes",
        "size": 1,
        "title": "Query store totals by database",
        "exportFieldName": "Resource",
        "exportParameterName": "Resource",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "LogAnalytics",
        "comparison": "isNotEqualTo"
      },
      "name": "query - Query Store Totals"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "4c2109be-6306-4c89-b7a2-e8d4ca4446f5",
            "version": "KqlParameterItem/1.0",
            "name": "OrderBy",
            "label": "Order by",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"ExecutionCount\", \"label\": \"Number of executions\", \"selected\":true},\r\n    { \"value\":\"DurationMinutes\", \"label\": \"Duration\", \"selected\":false},\r\n    { \"value\":\"CpuMinutes\", \"label\": \"CPU\", \"selected\":false},\r\n    { \"value\":\"LogicalReadsMB\", \"label\": \"Logical Reads\", \"selected\":false},\r\n    { \"value\":\"PhysicalReadsMB\", \"label\": \"Physical Reads\", \"selected\":false},\r\n    { \"value\":\"LogicalWritesMB\", \"label\": \"Logical Writes\", \"selected\":false},\r\n    { \"value\":\"QueryMaxUsedMemoryMB\", \"label\": \"Query Max Used Memory\", \"selected\":false},\r\n    { \"value\":\"LogMBUsed\", \"label\": \"Log Used\", \"selected\":false},\r\n    { \"value\":\"WaitTimeMinutes\", \"label\": \"Wait Time\", \"selected\":false}\r\n]"
          }
        ],
        "style": "pills",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "Resource",
        "comparison": "isNotEqualTo"
      },
      "name": "parameters - Worst Performing Queries"
    },
    {
      "type": 1,
      "content": {
        "json": "### Click a query to view the worst performing query plans"
      },
      "conditionalVisibility": {
        "parameterName": "Resource",
        "comparison": "isNotEqualTo"
      },
      "name": "text - Worst Performing Queries"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId == \"{Resource}\"\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = _ResourceId\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize ExecutionCount = sum(count_executions_d), DurationMinutes = round(sum(duration_d) / 60000000, 3), CpuMinutes = round(sum(cpu_time_d) / 60000000, 3), LogicalReadsMB = round(sum(logical_io_reads_d) / 128, 3), PhysicalReadsMB = round(sum(physical_io_reads_d) / 128, 3), LogicalWritesMB = round(sum(logical_io_writes_d) / 128, 3), QueryMaxUsedMemoryMB = round(avg(query_max_used_memory_d / count_executions_d) / 128, 3), LogMBUsed = round(sum(log_bytes_used_d) / 1024 / 1024, 3) by Resource, QueryId = query_id_d\r\n| join kind = inner (\r\n    AzureDiagnostics\r\n    | where Category  == \"QueryStoreWaitStatistics\"\r\n    | where _ResourceId == \"{Resource}\"\r\n    | extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n    | extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n    | extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n    | extend Resource = _ResourceId\r\n    | where start_time {TimeRange}\r\n    | where end_time {TimeRange}\r\n    | summarize WaitTimeMinutes = round(sum(total_query_wait_time_ms_d) / 60000, 3) by Resource, QueryId = query_id_d\r\n) on Resource, QueryId\r\n| project Resource, QueryId, ExecutionCount, DurationMinutes, CpuMinutes, LogicalReadsMB, PhysicalReadsMB, LogicalWritesMB, QueryMaxUsedMemoryMB, LogMBUsed, WaitTimeMinutes\r\n| order by {OrderBy} desc\r\n| take 25",
        "size": 0,
        "title": "Worst performing queries",
        "exportFieldName": "QueryId",
        "exportParameterName": "QueryId",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "Resource",
        "comparison": "isNotEqualTo"
      },
      "name": "query - Worst Performing Queries"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureDiagnostics\r\n| where Category  == \"QueryStoreRuntimeStatistics\"\r\n| where _ResourceId == \"{Resource}\"\r\n| where query_id_d == \"{QueryId}\"\r\n| extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n| extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n| extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n| extend Resource = _ResourceId\r\n| where start_time {TimeRange}\r\n| where end_time {TimeRange}\r\n| summarize ExecutionCount = sum(count_executions_d), DurationMinutes = round(sum(duration_d) / 60000000, 3), CpuMinutes = round(sum(cpu_time_d) / 60000000, 3), LogicalReadsMB = round(sum(logical_io_reads_d) / 128, 3), PhysicalReadsMB = round(sum(physical_io_reads_d) / 128, 3), LogicalWritesMB = round(sum(logical_io_writes_d) / 128, 3), QueryMaxUsedMemoryMB = round(avg(query_max_used_memory_d / count_executions_d) / 128, 3), LogMBUsed = round(sum(log_bytes_used_d) / 1024 / 1024, 3) by Resource, QueryId = query_id_d, PlanId = plan_id_d\r\n| join kind = inner (\r\n    AzureDiagnostics\r\n    | where Category  == \"QueryStoreWaitStatistics\"\r\n    | where _ResourceId == \"{Resource}\"\r\n    | where query_id_d == \"{QueryId}\"\r\n    | extend interval_start_time_date = round(interval_start_time_d / 4294967296, 0), interval_end_time_date = round(interval_end_time_d / 4294967296, 0)\r\n    | extend interval_start_time_time = interval_start_time_d - 4294967296 * interval_start_time_date, interval_end_time_time = interval_end_time_d - 4294967296 * interval_end_time_date\r\n    | extend start_time = datetime(1900-1-1) + time(1d) * interval_start_time_date + time(1s) * (interval_start_time_time / 300.0), end_time = datetime(1900-1-1) + time(1d) * interval_end_time_date + time(1s) * (interval_end_time_time / 300.0)\r\n    | extend Resource = _ResourceId\r\n    | where start_time {TimeRange}\r\n    | where end_time {TimeRange}\r\n    | summarize WaitTimeMinutes = round(sum(total_query_wait_time_ms_d) / 60000, 3) by Resource, QueryId = query_id_d, PlanId = plan_id_d\r\n) on Resource, QueryId, PlanId\r\n| project Resource, QueryId, PlanId, ExecutionCount, DurationMinutes, CpuMinutes, LogicalReadsMB, PhysicalReadsMB, LogicalWritesMB, QueryMaxUsedMemoryMB, LogMBUsed, WaitTimeMinutes\r\n| order by {OrderBy} desc\r\n| take 25",
        "size": 1,
        "title": "Worst performing query plans",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{LogAnalytics}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "QueryId",
        "comparison": "isNotEqualTo"
      },
      "name": "query - Worst Performing Plans"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}